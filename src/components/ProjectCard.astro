---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'div'> {
    slug: string;
    title: string;
    service: string;
    mediaType: 'image' | 'video';
    problem?: string;
    solution?: string;
    externalUrl?: string;
    ctaText: string;
}

const { slug, title, service, mediaType, problem, solution, externalUrl, ctaText } = Astro.props;

const videoUrl = `/images/${slug}.mp4`;
const posterUrl = `/images/${slug}-poster.webp`;
const imageUrl = `/images/${slug}.webp`;

// Lógica condicional para el enlace
const linkHref = externalUrl ? externalUrl : `/portafolio/${slug}`;
const linkTarget = externalUrl ? "_blank" : "_self";
const linkRel = externalUrl ? "noopener noreferrer" : "";
---

<div class="project-card-case">
    <div class="project-media">
        {mediaType === 'video' ? (
            <video src={videoUrl} poster={posterUrl} autoplay loop muted playsinline controls={false} />
        ) : (
            <img src={imageUrl} alt={`Imagen del proyecto ${title}`} loading="lazy" />
        )}
        <div class="project-service-tag">{service}</div>
    </div>
    <div class="project-info">
        <h3 class="project-title">{title}</h3>

        {problem && solution && (
            <div class="narrative-wrapper">
                <div class="narrative-section">
                    <h4>El Reto</h4>
                    <p>{problem}</p>
                </div>
                <div class="narrative-section">
                    <h4>La Solución</h4>
                    <p>{solution}</p>
                </div>
            </div>
        )}
        
        <a href={linkHref} target={linkTarget} rel={linkRel} class="project-link">{ctaText} &rarr;</a>
    </div>
</div>

<style>
    .project-card-case {
        border: 1px solid #334155;
        border-radius: 0.75rem;
        overflow: hidden;
        background-color: #1E293B;
        display: flex;
        flex-direction: column;
    }

    .project-media {
        position: relative;
        overflow: hidden;
        aspect-ratio: 16 / 9;
        background-color: #0F172A;
    }
    .project-media img, .project-media video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .project-service-tag {
        position: absolute;
        top: 1rem;
        left: 1rem;
        background-color: var(--color-acento);
        color: #fff;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        z-index: 2;
    }
    
    .project-info {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .project-title {
        font-size: 1.5rem;
        color: var(--color-texto-claro);
        margin-bottom: 1.5rem;
    }

    .narrative-wrapper {
        border-top: 1px solid #334155;
        padding-top: 1.5rem;
    }

    .narrative-section h4 {
        font-size: 0.875rem;
        font-weight: 700;
        color: #94a3b8;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    .narrative-section p {
        color: #cbd5e1;
        line-height: 1.6;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
    }

    .project-link {
        color: var(--color-acento);
        font-weight: 600;
        text-decoration: none;
        margin-top: auto;
    }

    /* ===== INICIO DE LA CORRECCIÓN ===== */
    @media (min-width: 992px) {
        .project-card-case {
            flex-direction: row;
        }

        .project-card-case:nth-child(even) {
            flex-direction: row-reverse;
        }

        .project-media {
            flex: 1 0 50%; /* Ocupa el 50% y no se encoge */
        }
        
        .project-info {
            flex: 1 1 50%; /* Ocupa el 50% pero puede encogerse si es necesario */
            min-width: 0; /* Permite que el contenedor se encoja y el texto se ajuste */
            padding: 2.5rem;
        }
    }
    /* ===== FIN DE LA CORRECCIÓN ===== */
</style>





